# Generated by Django 4.2.14 on 2024-08-31 01:04

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Badge name", max_length=30, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Badge description (Markdown is supported)",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CarouselImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="An image for the home page carousel",
                        upload_to="carousel/",
                    ),
                ),
                (
                    "label",
                    models.CharField(help_text="A label for the image", max_length=30),
                ),
                (
                    "caption",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="An optional extended caption for the image",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(
                        default=0, help_text="Optional sort order of image"
                    ),
                ),
            ],
            options={
                "verbose_name": "Carousel image",
                "verbose_name_plural": "Carousel images",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(help_text="Event name", max_length=30)),
                (
                    "start",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Event start date and time",
                    ),
                ),
                (
                    "end",
                    models.DateTimeField(
                        blank=True,
                        help_text="Optional event end date and time",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.CharField(help_text="Event location", max_length=30),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, default="", help_text="Optional event description"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        default="acm.png", help_text="Event image", upload_to="events/"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HSPCContest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField(default=2024, unique=True)),
                (
                    "problem_set",
                    models.FileField(
                        help_text="Problem set PDF", upload_to="hspc/problems/"
                    ),
                ),
                (
                    "judge_data",
                    models.FileField(
                        help_text="Judge input/output ZIP", upload_to="hspc/judge/"
                    ),
                ),
            ],
            options={
                "verbose_name": "HSPC contest",
                "verbose_name_plural": "HSPC contests",
            },
        ),
        migrations.CreateModel(
            name="NavBarLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="Link to page", max_length=150, unique=True
                    ),
                ),
                (
                    "label",
                    models.CharField(help_text="A label for the link", max_length=30),
                ),
                (
                    "sort_order",
                    models.IntegerField(
                        default=0, help_text="Optional sort order of link"
                    ),
                ),
            ],
            options={
                "verbose_name": "Navbar link",
                "verbose_name_plural": "Navbar links",
            },
        ),
        migrations.CreateModel(
            name="Officer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(help_text="First name", max_length=30)),
                ("last_name", models.CharField(help_text="Last name", max_length=30)),
                ("position", models.CharField(help_text="Position", max_length=30)),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Officer's biography (Markdown is supported)",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(
                        default=0, help_text="Optional sort order of officer"
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        default=2024, help_text="The year this officer was elected"
                    ),
                ),
                (
                    "faculty_advisor",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this person is a faculty advisor",
                    ),
                ),
                (
                    "email",
                    models.EmailField(help_text="UVA email address", max_length=254),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="A photo of the officer",
                        upload_to="officers/",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("badges", models.ManyToManyField(to="cns_website.badge")),
                ("events_attended", models.ManyToManyField(to="cns_website.event")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
